;────────────────────────────────────
;죠교자の행동を선택
;────────────────────────────────────
@PLAYER_ACT
#DIM LCOUNT, 1
TFLAG:턴방침 = 0
TFLAG:ACT분류 = 0

;まずは今回の방침を決定
;(죠교強度に対する방침)
CALL ACT_COURSE
;죠교방침예약の処理
IF TFLAG:방침예약
	TFLAG:턴방침 = TFLAG:방침예약
	TFLAG:방침예약 = 0
	SIF FLAG:디버그
		CALL PRINT_DIALOG(@"방침예약により방침を%POLICY("今")%に変更しま했다", 2, 2, 2)
ENDIF

;ACT분류未決定を代入
TFLAG:ACT분류 = -1

;휴식でなければ続いて今回の죠교類別を決定
IF TFLAG:턴방침 != 1
	;ACT個別보정値を調整
	CALL ACT_M_RESEARCH
	;죠교種別を決定
	CALL ACT_MENU
ELSE
	TFLAG:ACT분류 = 9
ENDIF

;죠교メニュー別処理
;ACT未決定を代入
TFLAG:ACT = -1

;죠교メニュー예약の処理
IF TFLAG:ACT분류예약 >= 0
	;예약を採用
	TFLAG:ACT분류 = TFLAG:ACT분류예약
	;実行可否判定
	CALLFORM ACT_M{TFLAG:ACT분류}
	IF FLAG:디버그
		IF TFLAG:ACT == -1
			CALL PRINT_DIALOG(@"メニュー예약によりメニューを%MENU(TFLAG:ACT분류예약)%に変更しようとしま했다が、実行不能で했다", 2, 2, 2)
		ELSE
			CALL PRINT_DIALOG(@"メニュー예약によりメニューを%MENU(TFLAG:ACT분류예약)%に変更しま했다", 2, 2, 2)
		ENDIF
	ENDIF
	;예약を解除
	TFLAG:ACT분류예약 = -1
ENDIF

;ACT未決定なら
WHILE TFLAG:ACT == -1
	;ACT분류を指定する(指定済みなら飛ばす)
	SIF TFLAG:ACT분류 == -1
		CALL ACT_MENU_RESULT(1)
	;それでも指定できなければ『지금 기분을 묻다』ACTに決定
	IF TFLAG:ACT분류 == -1
		TFLAG:ACT = 0
		TFLAG:ACT분류 = 0
		SIF FLAG:디버그
			PRINTL (채용 가능ACT, ACT분류가 존재하지 않기 때문에, 「지금의 기분을 (듣)묻는다」ACT(을)를 채용했습니다)
	;実行可否判定
	ELSE
		CALLFORM ACT_M{TFLAG:ACT분류}
	ENDIF
WEND

;행동예약の処理
IF TCVAR:행동예약 >= 0
	TFLAG:ACT = TCVAR:행동예약
	TCVAR:행동예약 = -1
	SIF FLAG:디버그
		CALL PRINT_DIALOG(@"행동예약により행동を%STR:(TFLAG:ACT)%に変更しま했다", 2, 2, 2)
	;変更後のACTと、ACT분류が違う場合
	IF TFLAG:ACT분류 != GET_ACTM(TFLAG:ACT)
		TFLAG:ACT분류 = GET_ACTM(TFLAG:ACT)
		SIF FLAG:디버그
			CALL PRINT_DIALOG(@"それに伴い、メニューを%MENU(TFLAG:ACT분류)%に変更しま했다", 2, 2, 2)
	ENDIF
ENDIF

;────────────────────────────────────
;ACT個別보정値調整
;────────────────────────────────────
@ACT_M_RESEARCH
#DIM LCOUNT, 1

;디버그表示をオフにしてACT_Mを行い、보정値を計算
FLAG:디버그표시끄기 = 1
FOR LCOUNT, 0, 11
	CALLFORM ACT_M{LCOUNT}(1)
NEXT
;디버그表示をオンに戻す
FLAG:디버그표시끄기 = 0
;디버그時、보정値表示
[SKIPSTART]
IF FLAG:디버그
	;LOCAL初期化
	LOCAL = 0
	LOCAL:1 = GETCOLOR()
	;全보정値に対し
	FOR LCOUNT, 0, 200
		;対応ACTが存在すれば
		IF STR:LCOUNT != ""
			;文字数カウント
			LOCAL += 10
			;一行を突破すると改行
			IF LOCAL >= WIDTH()
				PRINTL 
				LOCAL = 0
			ENDIF
			;보정値취득
			LOCAL:2 = CFLAG:(400 + LCOUNT)
			;보정値の表示上下限に収め、色を変える
			IF LOCAL:2 < -99
				LOCAL:2 = -99
				SETCOLOR 0xC07070
			ELSEIF LOCAL:2 > 999
				LOCAL:2 = 999
				SETCOLOR 0x66FFFF
			ENDIF
			;보정値表示
			PRINTFORM %GET_ACTABBNAME(LCOUNT), 4%({LOCAL:2, 3}) 
			;文字色リセット
			SETCOLOR LOCAL:1
		ENDIF
	NEXT
;OriginalString : 
	PRINTW 
ENDIF
[SKIPEND]
;RESULT保持
RETURN RESULT

;보정値加減算処理
@ACT_M_RES_CALC(ARG, ARG:1)
;現在値が0ならそのまま採用
IF CFLAG:(400 + ARG) == 0
	CFLAG:(400 + ARG) = ARG:1
;現在値と加減算値の正負が逆ならそのまま加減算
ELSEIF (CFLAG:(400 + ARG) > 0) == (ARG:1 < 0)
	CFLAG:(400 + ARG) += ARG:1
;現在値と加減算値の正負が同じなら徐々に加減算量を0に近づける
ELSE
	CFLAG:(400 + ARG) += (ARG:1 * LIMIT(ARG:1 * 100 / CFLAG:(400 + ARG), 0, 100)) / 100
ENDIF
;RESULT保持
RETURN RESULT

;系列別보정値취득関数
;ARG、またはARGSに系列を指定
@ACT_M_RES_MENU(ARG = -1, ARGS)
#DIM LCOUNT
;系列번호を취득
IF ARG == -1
	LOCAL = MENUNUM(ARGS)
ELSE
	LOCAL = ARG
ENDIF
;系列存在を確認
SIF MENU(LOCAL) == ""
	RETURN -999
;所属ACT全てに対し個別보정値を計算して、最大の物을반환
CALL ACT_M_RES_FETCH(ACTM_NUM(LOCAL, 0))
LOCAL:1 = RESULT
FOR LCOUNT, 1, ACTM_NUM(LOCAL, -1)
	CALL ACT_M_RES_FETCH(ACTM_NUM(LOCAL, LCOUNT))
	LOCAL:1 = MAX(LOCAL:1, RESULT)
NEXT
;보정値을반환
RETURN LOCAL:1

;個別보정値취득関数
@ACT_M_RES_FETCH(ARG = -1, ARGS)
;系列번호を취득
IF ARG == -1
	LOCAL = GET_ACTNUM(ARGS)
ELSE
	LOCAL = ARG
ENDIF
;ACT存在を確認
SIF GET_ACTNAME(LOCAL) == "" || GET_ACTNAME(LOCAL) == "ＮＯＮＥ"
	RETURN -999
;実行不可時、보정値を-999固定
CALLFORM ACT_ABLE{LOCAL}
SIF !RESULT
	RETURN -999
;보정値を初期化
LOCAL:1 = 0
;短期보정値취득・加算
LOCAL:1 += CFLAG:(400 + LOCAL)
;長期보정値취득・加算
LOCAL:1 += ABCBSI(ARG * 60)
;보정値을반환
RETURN LOCAL:1

;────────────────────────────────────
;ACT長期보정値調整
;────────────────────────────────────
;ARG = 0:죠교前(初期化) 1:죠교後(算入)
@ACT_M_RESEARCH_L(ARG)
#LOCALSIZE 200
#DIM LCOUNT
#DIM LTEMP, 200

;죠교前
IF ARG == 0
	;ACT実行횟수を保存
	FOR LCOUNT, 0, 200
		LOCAL:LCOUNT = FLAG:(1000 + LCOUNT)
	NEXT
;죠교後
ELSE
	FOR LCOUNT, 0, 200
		;ACT実行횟수増分の平方根の正負を逆転し、ACT長期보정値変動値とする
		LTEMP:LCOUNT =  LOCAL:LCOUNT - FLAG:(1000 + LCOUNT)
		;素質によって加算方向にボーナス
		;(※長く行われなかったACTを有利にするため)
		LTEMP:LCOUNT += 4 + TALENT:호기심 - TALENT:무관심 + TALENT:민감 - TALENT:신중함
	NEXT
	;죠교대상反応による흥미보정を加算
	CALL KYOMI_ADD(1)
	FOR LCOUNT, 0, 200
		LTEMP:LCOUNT += RESULT:LCOUNT
	NEXT
	;実際の加算処理(値が大きくなりすぎないよう調整)
	FOR LCOUNT, 0, 200
		;符号が違えば보정値が大きいほど変動が加速
		IF SIGN(CFLAG:(600 + LCOUNT)) != SIGN(LTEMP:LCOUNT)
			CFLAG:(600 + LCOUNT) += LTEMP:LCOUNT * MAX(ABS(CFLAG:(600 + LCOUNT)), 50) / 50
		;符号が同じなら보정値が大きいほど変動が減速(変動時+-1を保証)
		ELSEIF LTEMP:LCOUNT != 0
			CFLAG:(600 + LCOUNT) += SIGN(LTEMP:LCOUNT) * MAX(ABS(LTEMP:LCOUNT) * 50 / MAX(ABS(CFLAG:(600 + LCOUNT)), 50), 1)
		ENDIF
	NEXT
	;디버그時、보정値表示(ただし오토모드の簡易表意時は除く)
	IF FLAG:디버그 && !(FLAG:오토모드 > 0 && FLAG:오토모드표시설정 == 1)
		;LOCAL初期化
		LOCAL = 0
		LOCAL:1 = GETCOLOR()
		;全보정値に対し
		FOR LCOUNT, 0, 200
			;対応ACTが存在すれば
			IF STR:LCOUNT != ""
				;文字数カウント
				LOCAL += 10
				;一行を突破すると改行
				IF LOCAL >= WIDTH()
					PRINTL 
					LOCAL = 0
				ENDIF
				;보정値취득
				LOCAL:2 = CFLAG:(600 + LCOUNT)
				;보정値の表示上下限に収め、色を変える
				IF LOCAL:2 < -99
					LOCAL:2 = -99
					SETCOLOR 0xC07070
				ELSEIF LOCAL:2 > 999
					LOCAL:2 = 999
					SETCOLOR 0x66FFFF
				ENDIF
				;보정値表示
				PRINTFORM %GET_ACTABBNAME(LCOUNT), 4%({LOCAL:2, 3}) 
				;文字色リセット
				SETCOLOR LOCAL:1
			ENDIF
		NEXT
;OriginalString : 
		PRINTW 
	ENDIF
ENDIF
RETURN RESULT

